name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  BUILD_TYPE: Release

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          git \
          libssl-dev \
          zlib1g-dev \
          libjsoncpp-dev \
          uuid-dev \
          sqlite3 \
          libsqlite3-dev \
          libbrotli-dev \
          pkg-config
    
    - name: Cache Drogon installation
      id: cache-drogon
      uses: actions/cache@v4
      with:
        path: /usr/local
        key: drogon-${{ runner.os }}-${{ hashFiles('**/CMakeLists.txt') }}
        restore-keys: |
          drogon-${{ runner.os }}-
    
    - name: Install Drogon framework
      if: steps.cache-drogon.outputs.cache-hit != 'true'
      run: |
        git clone https://github.com/drogonframework/drogon.git
        cd drogon
        git checkout v1.9.1  # Use stable version
        git submodule update --init
        mkdir build && cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -G Ninja
        ninja -j$(nproc)
        sudo ninja install
        sudo ldconfig
    
    - name: Create test database
      run: |
        # Create the inventory database with sample data for testing
        sqlite3 inventory.db < <(cat << 'EOF'
        CREATE TABLE IF NOT EXISTS products (
            product_id INTEGER PRIMARY KEY AUTOINCREMENT,
            sku TEXT NOT NULL UNIQUE,
            name TEXT NOT NULL,
            description TEXT,
            reorder_threshold INTEGER NOT NULL,
            quantity_in_stock INTEGER NOT NULL,
            supplier_id INTEGER,
            warehouse_id INTEGER
        );
        
        CREATE TABLE IF NOT EXISTS suppliers (
            supplier_id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            contact_email TEXT,
            contact_phone TEXT
        );
        
        CREATE TABLE IF NOT EXISTS warehouses (
            warehouse_id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            location TEXT,
            capacity INTEGER
        );
        
        CREATE TABLE IF NOT EXISTS purchase_orders (
            order_id INTEGER PRIMARY KEY AUTOINCREMENT,
            product_id INTEGER,
            quantity_ordered INTEGER NOT NULL,
            order_date TEXT DEFAULT CURRENT_TIMESTAMP,
            status TEXT DEFAULT 'PENDING',
            FOREIGN KEY (product_id) REFERENCES products(product_id)
        );
        
        -- Insert test data
        INSERT INTO suppliers (name, contact_email, contact_phone) VALUES 
        ('TechCorp', 'contact@techcorp.com', '555-0101'),
        ('GadgetSupply', 'sales@gadgetsupply.com', '555-0102');
        
        INSERT INTO warehouses (name, location, capacity) VALUES 
        ('Main Warehouse', 'New York', 10000),
        ('West Coast Hub', 'Los Angeles', 5000);
        
        INSERT INTO products (sku, name, description, reorder_threshold, quantity_in_stock, supplier_id, warehouse_id) VALUES 
        ('SKU001', 'Laptop', 'High-end laptop', 10, 5, 1, 1),
        ('SKU002', 'Phone', 'Smartphone', 15, 20, 2, 2);
        EOF
        )
    
    - name: Configure CMake
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=$BUILD_TYPE -G Ninja
    
    - name: Build project
      run: |
        cmake --build build --config $BUILD_TYPE --parallel $(nproc)
    
    - name: Run basic functionality test
      run: |
        cd build
        timeout 10s ./inventory_system &
        sleep 5
        
        # Test health endpoint
        curl -f http://localhost:7777/health || exit 1
        
        # Test API endpoint
        curl -f http://localhost:7777/api/products || exit 1
        
        # Kill the server
        pkill -f inventory_system || true
        
        echo "✅ All tests passed!"
    
    - name: Run unit tests (if available)
      run: |
        cd build
        if [ -f "./inventory_system_test" ]; then
          ./inventory_system_test
          echo "✅ Unit tests passed!"
        else
          echo "ℹ️ No unit tests found"
        fi
    
    - name: Package artifacts
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        mkdir -p artifacts
        cp build/inventory_system artifacts/
        cp config.json artifacts/ 2>/dev/null || echo "config.json not found"
        cp config.yaml artifacts/ 2>/dev/null || echo "config.yaml not found"
        cp inventory.db artifacts/
        
        # Create version info
        echo "Build: $(git rev-parse --short HEAD)" > artifacts/VERSION
        echo "Date: $(date -u)" >> artifacts/VERSION
        echo "Branch: $(git branch --show-current)" >> artifacts/VERSION
    
    - name: Upload build artifacts
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: inventory-system-${{ github.sha }}
        path: artifacts/
        retention-days: 30
    
    - name: Create Release
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        name: Release ${{ github.ref_name }}
        body: |
          ## Changes in this Release
          - Automated build of Inventory Management System
          - Built with Drogon framework
          - Includes SQLite database with sample data
          
          ## Assets
          - `inventory_system`: Main executable
          - `inventory.db`: SQLite database with sample data
          - Configuration files
        draft: false
        prerelease: false
        files: artifacts/*

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install analysis tools
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck clang-format
    
    - name: Check code formatting
      run: |
        find . -name "*.cc" -o -name "*.h" | grep -v models/ | grep -v build/ | \
        xargs clang-format --dry-run --Werror --style=file || \
        (echo "❌ Code formatting issues found. Run 'clang-format -i' on the files." && exit 1)
    
    - name: Run static analysis
      run: |
        cppcheck --enable=warning,style,performance \
          --std=c++17 \
          --suppress=missingInclude \
          --suppress=unusedFunction \
          --error-exitcode=1 \
          --quiet \
          main.cc controllers/ || \
        (echo "❌ Static analysis issues found" && exit 1)
        
        echo "✅ Static analysis passed!"