name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  BUILD_TYPE: Release

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          git \
          libssl-dev \
          zlib1g-dev \
          libjsoncpp-dev \
          uuid-dev \
          sqlite3 \
          libsqlite3-dev \
          libbrotli-dev \
          pkg-config
    
    - name: Cache Drogon installation
      id: cache-drogon
      uses: actions/cache@v4
      with:
        path: /usr/local
        key: drogon-${{ runner.os }}-${{ hashFiles('**/CMakeLists.txt') }}
        restore-keys: |
          drogon-${{ runner.os }}-
    
    - name: Install Drogon framework
      if: steps.cache-drogon.outputs.cache-hit != 'true'
      run: |
        git clone https://github.com/drogonframework/drogon.git
        cd drogon
        git checkout v1.9.1  # Use stable version
        git submodule update --init
        mkdir build && cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -G Ninja
        ninja -j$(nproc)
        sudo ninja install
        sudo ldconfig
    
    - name: Create test database
      run: |
        # Remove any existing database to avoid constraint conflicts
        rm -f inventory.db
        
        # Create the inventory database with schema matching the application
        sqlite3 inventory.db < <(cat << 'EOF'
        CREATE TABLE IF NOT EXISTS products (
            product_id INTEGER PRIMARY KEY AUTOINCREMENT,
            sku TEXT UNIQUE NOT NULL,
            name TEXT NOT NULL,
            description TEXT,
            category TEXT,
            unit_price REAL NOT NULL DEFAULT 0.0,
            quantity_in_stock INTEGER NOT NULL DEFAULT 0,
            reorder_threshold INTEGER NOT NULL DEFAULT 0,
            supplier_id INTEGER,
            warehouse_id INTEGER,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
        );
        
        CREATE TABLE IF NOT EXISTS supplier (
            supplier_id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            contact_person TEXT,
            email TEXT,
            phone TEXT,
            address TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
        );
        
        CREATE TABLE IF NOT EXISTS warehouse (
            warehouse_id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            location TEXT,
            capacity INTEGER,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
        );
        
        CREATE TABLE IF NOT EXISTS purchase_order (
            order_id INTEGER PRIMARY KEY AUTOINCREMENT,
            product_id INTEGER NOT NULL,
            supplier_id INTEGER NOT NULL,
            quantity_ordered INTEGER NOT NULL,
            unit_price REAL NOT NULL,
            total_price REAL NOT NULL,
            order_date DATETIME DEFAULT CURRENT_TIMESTAMP,
            expected_delivery_date DATETIME,
            actual_delivery_date DATETIME,
            status TEXT NOT NULL DEFAULT 'PENDING',
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (product_id) REFERENCES products(product_id),
            FOREIGN KEY (supplier_id) REFERENCES supplier(supplier_id)
        );
        
        -- Insert test data with correct column names
        INSERT INTO supplier (name, contact_person, email, phone, address) VALUES 
        ('ABC Supplies', 'John Doe', 'john@abcsupplies.com', '+1234567890', '123 Business Ave'),
        ('TechCorp', 'Jane Smith', 'contact@techcorp.com', '555-0101', '456 Tech Blvd');
        
        INSERT INTO warehouse (name, location, capacity) VALUES 
        ('Main Warehouse', '123 Storage St', 10000),
        ('West Coast Hub', 'Los Angeles', 5000);
        
        INSERT INTO products (sku, name, description, category, unit_price, quantity_in_stock, reorder_threshold, supplier_id, warehouse_id) VALUES 
        ('SKU001', 'Laptop', 'Business laptop', 'Electronics', 999.99, 50, 10, 1, 1),
        ('SKU002', 'Mouse', 'Wireless optical mouse', 'Electronics', 29.99, 100, 20, 1, 1),
        ('SKU003', 'Keyboard', 'Mechanical keyboard', 'Electronics', 89.99, 75, 15, 2, 2);
        EOF
        )
    
    - name: Configure CMake
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=$BUILD_TYPE -G Ninja
    
    - name: Build project
      run: |
        cmake --build build --config $BUILD_TYPE --parallel $(nproc)
    
    - name: Run basic functionality test
      run: |
        # Copy config files and database to build directory
        cp config.json build/
        cp config.yaml build/ 2>/dev/null || echo "config.yaml not required"
        cp inventory.db build/
        
        cd build
        timeout 10s ./inventory_system &
        sleep 5
        
        # Test health endpoint
        curl -f http://localhost:7777/health || exit 1
        
        # Test API endpoint
        curl -f http://localhost:7777/api/products || exit 1
        
        # Kill the server
        pkill -f inventory_system || true
        
        echo "✅ All tests passed!"
    
    - name: Run unit tests (if available)
      run: |
        cd build
        if [ -f "./inventory_system_test" ]; then
          ./inventory_system_test
          echo "✅ Unit tests passed!"
        else
          echo "ℹ️ No unit tests found"
        fi
    
    - name: Package artifacts
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        mkdir -p artifacts
        cp build/inventory_system artifacts/
        cp config.json artifacts/ 2>/dev/null || echo "config.json not found"
        cp config.yaml artifacts/ 2>/dev/null || echo "config.yaml not found"
        cp inventory.db artifacts/
        
        # Create version info
        echo "Build: $(git rev-parse --short HEAD)" > artifacts/VERSION
        echo "Date: $(date -u)" >> artifacts/VERSION
        echo "Branch: $(git branch --show-current)" >> artifacts/VERSION
    
    - name: Upload build artifacts
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: inventory-system-${{ github.sha }}
        path: artifacts/
        retention-days: 30
    
    - name: Create Release
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        name: Release ${{ github.ref_name }}
        body: |
          ## Changes in this Release
          - Automated build of Inventory Management System
          - Built with Drogon framework
          - Includes SQLite database with sample data
          
          ## Assets
          - `inventory_system`: Main executable
          - `inventory.db`: SQLite database with sample data
          - Configuration files
        draft: false
        prerelease: false
        files: artifacts/*

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install analysis tools
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck clang-format
    
    - name: Check code formatting
      run: |
        find . -name "*.cc" -o -name "*.h" | grep -v models/ | grep -v build/ | \
        xargs clang-format --dry-run --Werror --style=file || \
        (echo "❌ Code formatting issues found. Run 'clang-format -i' on the files." && exit 1)
    
    - name: Run static analysis
      run: |
        cppcheck --enable=warning,style,performance \
          --std=c++17 \
          --suppress=missingInclude \
          --suppress=unusedFunction \
          --error-exitcode=1 \
          --quiet \
          main.cc controllers/ || \
        (echo "❌ Static analysis issues found" && exit 1)
        
        echo "✅ Static analysis passed!"