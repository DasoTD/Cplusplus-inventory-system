/**
 *
 *  Warehouses.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Warehouses.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::sqlite3;

const std::string Warehouses::Cols::_warehouse_id = "warehouse_id";
const std::string Warehouses::Cols::_name = "name";
const std::string Warehouses::Cols::_location = "location";
const std::string Warehouses::Cols::_capacity = "capacity";
const std::string Warehouses::primaryKeyName = "warehouse_id";
const bool Warehouses::hasPrimaryKey = true;
const std::string Warehouses::tableName = "warehouses";

const std::vector<typename Warehouses::MetaData> Warehouses::metaData_ = {
    {"warehouse_id", "int64_t", "integer", 8, 1, 1, 0},
    {"name", "std::string", "text", 0, 0, 0, 1},
    {"location", "std::string", "text", 0, 0, 0, 1},
    {"capacity", "int64_t", "integer", 8, 0, 0, 1}};
const std::string& Warehouses::getColumnName(size_t index) noexcept(false) {
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Warehouses::Warehouses(const Row& r, const ssize_t indexOffset) noexcept {
    if (indexOffset < 0) {
        if (!r["warehouse_id"].isNull()) {
            warehouseId_ = std::make_shared<int64_t>(r["warehouse_id"].as<int64_t>());
        }
        if (!r["name"].isNull()) {
            name_ = std::make_shared<std::string>(r["name"].as<std::string>());
        }
        if (!r["location"].isNull()) {
            location_ = std::make_shared<std::string>(r["location"].as<std::string>());
        }
        if (!r["capacity"].isNull()) {
            capacity_ = std::make_shared<int64_t>(r["capacity"].as<int64_t>());
        }
    } else {
        size_t offset = (size_t)indexOffset;
        if (offset + 4 > r.size()) {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if (!r[index].isNull()) {
            warehouseId_ = std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 1;
        if (!r[index].isNull()) {
            name_ = std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if (!r[index].isNull()) {
            location_ = std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if (!r[index].isNull()) {
            capacity_ = std::make_shared<int64_t>(r[index].as<int64_t>());
        }
    }
}

Warehouses::Warehouses(const Json::Value& pJson,
                       const std::vector<std::string>& pMasqueradingVector) noexcept(false) {
    if (pMasqueradingVector.size() != 4) {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0])) {
        dirtyFlag_[0] = true;
        if (!pJson[pMasqueradingVector[0]].isNull()) {
            warehouseId_ =
                std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1])) {
        dirtyFlag_[1] = true;
        if (!pJson[pMasqueradingVector[1]].isNull()) {
            name_ = std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if (!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2])) {
        dirtyFlag_[2] = true;
        if (!pJson[pMasqueradingVector[2]].isNull()) {
            location_ = std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if (!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3])) {
        dirtyFlag_[3] = true;
        if (!pJson[pMasqueradingVector[3]].isNull()) {
            capacity_ = std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
}

Warehouses::Warehouses(const Json::Value& pJson) noexcept(false) {
    if (pJson.isMember("warehouse_id")) {
        dirtyFlag_[0] = true;
        if (!pJson["warehouse_id"].isNull()) {
            warehouseId_ = std::make_shared<int64_t>((int64_t)pJson["warehouse_id"].asInt64());
        }
    }
    if (pJson.isMember("name")) {
        dirtyFlag_[1] = true;
        if (!pJson["name"].isNull()) {
            name_ = std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if (pJson.isMember("location")) {
        dirtyFlag_[2] = true;
        if (!pJson["location"].isNull()) {
            location_ = std::make_shared<std::string>(pJson["location"].asString());
        }
    }
    if (pJson.isMember("capacity")) {
        dirtyFlag_[3] = true;
        if (!pJson["capacity"].isNull()) {
            capacity_ = std::make_shared<int64_t>((int64_t)pJson["capacity"].asInt64());
        }
    }
}

void Warehouses::updateByMasqueradedJson(
    const Json::Value& pJson, const std::vector<std::string>& pMasqueradingVector) noexcept(false) {
    if (pMasqueradingVector.size() != 4) {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0])) {
        if (!pJson[pMasqueradingVector[0]].isNull()) {
            warehouseId_ =
                std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1])) {
        dirtyFlag_[1] = true;
        if (!pJson[pMasqueradingVector[1]].isNull()) {
            name_ = std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if (!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2])) {
        dirtyFlag_[2] = true;
        if (!pJson[pMasqueradingVector[2]].isNull()) {
            location_ = std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if (!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3])) {
        dirtyFlag_[3] = true;
        if (!pJson[pMasqueradingVector[3]].isNull()) {
            capacity_ = std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
}

void Warehouses::updateByJson(const Json::Value& pJson) noexcept(false) {
    if (pJson.isMember("warehouse_id")) {
        if (!pJson["warehouse_id"].isNull()) {
            warehouseId_ = std::make_shared<int64_t>((int64_t)pJson["warehouse_id"].asInt64());
        }
    }
    if (pJson.isMember("name")) {
        dirtyFlag_[1] = true;
        if (!pJson["name"].isNull()) {
            name_ = std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if (pJson.isMember("location")) {
        dirtyFlag_[2] = true;
        if (!pJson["location"].isNull()) {
            location_ = std::make_shared<std::string>(pJson["location"].asString());
        }
    }
    if (pJson.isMember("capacity")) {
        dirtyFlag_[3] = true;
        if (!pJson["capacity"].isNull()) {
            capacity_ = std::make_shared<int64_t>((int64_t)pJson["capacity"].asInt64());
        }
    }
}

const int64_t& Warehouses::getValueOfWarehouseId() const noexcept {
    static const int64_t defaultValue = int64_t();
    if (warehouseId_)
        return *warehouseId_;
    return defaultValue;
}
const std::shared_ptr<int64_t>& Warehouses::getWarehouseId() const noexcept {
    return warehouseId_;
}
void Warehouses::setWarehouseId(const int64_t& pWarehouseId) noexcept {
    warehouseId_ = std::make_shared<int64_t>(pWarehouseId);
    dirtyFlag_[0] = true;
}
void Warehouses::setWarehouseIdToNull() noexcept {
    warehouseId_.reset();
    dirtyFlag_[0] = true;
}
const typename Warehouses::PrimaryKeyType& Warehouses::getPrimaryKey() const {
    assert(warehouseId_);
    return *warehouseId_;
}

const std::string& Warehouses::getValueOfName() const noexcept {
    static const std::string defaultValue = std::string();
    if (name_)
        return *name_;
    return defaultValue;
}
const std::shared_ptr<std::string>& Warehouses::getName() const noexcept {
    return name_;
}
void Warehouses::setName(const std::string& pName) noexcept {
    name_ = std::make_shared<std::string>(pName);
    dirtyFlag_[1] = true;
}
void Warehouses::setName(std::string&& pName) noexcept {
    name_ = std::make_shared<std::string>(std::move(pName));
    dirtyFlag_[1] = true;
}

const std::string& Warehouses::getValueOfLocation() const noexcept {
    static const std::string defaultValue = std::string();
    if (location_)
        return *location_;
    return defaultValue;
}
const std::shared_ptr<std::string>& Warehouses::getLocation() const noexcept {
    return location_;
}
void Warehouses::setLocation(const std::string& pLocation) noexcept {
    location_ = std::make_shared<std::string>(pLocation);
    dirtyFlag_[2] = true;
}
void Warehouses::setLocation(std::string&& pLocation) noexcept {
    location_ = std::make_shared<std::string>(std::move(pLocation));
    dirtyFlag_[2] = true;
}

const int64_t& Warehouses::getValueOfCapacity() const noexcept {
    static const int64_t defaultValue = int64_t();
    if (capacity_)
        return *capacity_;
    return defaultValue;
}
const std::shared_ptr<int64_t>& Warehouses::getCapacity() const noexcept {
    return capacity_;
}
void Warehouses::setCapacity(const int64_t& pCapacity) noexcept {
    capacity_ = std::make_shared<int64_t>(pCapacity);
    dirtyFlag_[3] = true;
}

void Warehouses::updateId(const uint64_t id) {
    warehouseId_ = std::make_shared<int64_t>(static_cast<int64_t>(id));
}

const std::vector<std::string>& Warehouses::insertColumns() noexcept {
    static const std::vector<std::string> inCols = {"name", "location", "capacity"};
    return inCols;
}

void Warehouses::outputArgs(drogon::orm::internal::SqlBinder& binder) const {
    if (dirtyFlag_[1]) {
        if (getName()) {
            binder << getValueOfName();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[2]) {
        if (getLocation()) {
            binder << getValueOfLocation();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[3]) {
        if (getCapacity()) {
            binder << getValueOfCapacity();
        } else {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Warehouses::updateColumns() const {
    std::vector<std::string> ret;
    if (dirtyFlag_[1]) {
        ret.push_back(getColumnName(1));
    }
    if (dirtyFlag_[2]) {
        ret.push_back(getColumnName(2));
    }
    if (dirtyFlag_[3]) {
        ret.push_back(getColumnName(3));
    }
    return ret;
}

void Warehouses::updateArgs(drogon::orm::internal::SqlBinder& binder) const {
    if (dirtyFlag_[1]) {
        if (getName()) {
            binder << getValueOfName();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[2]) {
        if (getLocation()) {
            binder << getValueOfLocation();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[3]) {
        if (getCapacity()) {
            binder << getValueOfCapacity();
        } else {
            binder << nullptr;
        }
    }
}
Json::Value Warehouses::toJson() const {
    Json::Value ret;
    if (getWarehouseId()) {
        ret["warehouse_id"] = (Json::Int64)getValueOfWarehouseId();
    } else {
        ret["warehouse_id"] = Json::Value();
    }
    if (getName()) {
        ret["name"] = getValueOfName();
    } else {
        ret["name"] = Json::Value();
    }
    if (getLocation()) {
        ret["location"] = getValueOfLocation();
    } else {
        ret["location"] = Json::Value();
    }
    if (getCapacity()) {
        ret["capacity"] = (Json::Int64)getValueOfCapacity();
    } else {
        ret["capacity"] = Json::Value();
    }
    return ret;
}

std::string Warehouses::toString() const {
    return toJson().toStyledString();
}

Json::Value Warehouses::toMasqueradedJson(
    const std::vector<std::string>& pMasqueradingVector) const {
    Json::Value ret;
    if (pMasqueradingVector.size() == 4) {
        if (!pMasqueradingVector[0].empty()) {
            if (getWarehouseId()) {
                ret[pMasqueradingVector[0]] = (Json::Int64)getValueOfWarehouseId();
            } else {
                ret[pMasqueradingVector[0]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[1].empty()) {
            if (getName()) {
                ret[pMasqueradingVector[1]] = getValueOfName();
            } else {
                ret[pMasqueradingVector[1]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[2].empty()) {
            if (getLocation()) {
                ret[pMasqueradingVector[2]] = getValueOfLocation();
            } else {
                ret[pMasqueradingVector[2]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[3].empty()) {
            if (getCapacity()) {
                ret[pMasqueradingVector[3]] = (Json::Int64)getValueOfCapacity();
            } else {
                ret[pMasqueradingVector[3]] = Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if (getWarehouseId()) {
        ret["warehouse_id"] = (Json::Int64)getValueOfWarehouseId();
    } else {
        ret["warehouse_id"] = Json::Value();
    }
    if (getName()) {
        ret["name"] = getValueOfName();
    } else {
        ret["name"] = Json::Value();
    }
    if (getLocation()) {
        ret["location"] = getValueOfLocation();
    } else {
        ret["location"] = Json::Value();
    }
    if (getCapacity()) {
        ret["capacity"] = (Json::Int64)getValueOfCapacity();
    } else {
        ret["capacity"] = Json::Value();
    }
    return ret;
}

bool Warehouses::validateJsonForCreation(const Json::Value& pJson, std::string& err) {
    if (pJson.isMember("warehouse_id")) {
        if (!validJsonOfField(0, "warehouse_id", pJson["warehouse_id"], err, true))
            return false;
    }
    if (pJson.isMember("name")) {
        if (!validJsonOfField(1, "name", pJson["name"], err, true))
            return false;
    } else {
        err = "The name column cannot be null";
        return false;
    }
    if (pJson.isMember("location")) {
        if (!validJsonOfField(2, "location", pJson["location"], err, true))
            return false;
    } else {
        err = "The location column cannot be null";
        return false;
    }
    if (pJson.isMember("capacity")) {
        if (!validJsonOfField(3, "capacity", pJson["capacity"], err, true))
            return false;
    } else {
        err = "The capacity column cannot be null";
        return false;
    }
    return true;
}
bool Warehouses::validateMasqueradedJsonForCreation(
    const Json::Value& pJson, const std::vector<std::string>& pMasqueradingVector,
    std::string& err) {
    if (pMasqueradingVector.size() != 4) {
        err = "Bad masquerading vector";
        return false;
    }
    try {
        if (!pMasqueradingVector[0].empty()) {
            if (pJson.isMember(pMasqueradingVector[0])) {
                if (!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err,
                                      true))
                    return false;
            }
        }
        if (!pMasqueradingVector[1].empty()) {
            if (pJson.isMember(pMasqueradingVector[1])) {
                if (!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err,
                                      true))
                    return false;
            } else {
                err = "The " + pMasqueradingVector[1] + " column cannot be null";
                return false;
            }
        }
        if (!pMasqueradingVector[2].empty()) {
            if (pJson.isMember(pMasqueradingVector[2])) {
                if (!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err,
                                      true))
                    return false;
            } else {
                err = "The " + pMasqueradingVector[2] + " column cannot be null";
                return false;
            }
        }
        if (!pMasqueradingVector[3].empty()) {
            if (pJson.isMember(pMasqueradingVector[3])) {
                if (!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err,
                                      true))
                    return false;
            } else {
                err = "The " + pMasqueradingVector[3] + " column cannot be null";
                return false;
            }
        }
    } catch (const Json::LogicError& e) {
        err = e.what();
        return false;
    }
    return true;
}
bool Warehouses::validateJsonForUpdate(const Json::Value& pJson, std::string& err) {
    if (pJson.isMember("warehouse_id")) {
        if (!validJsonOfField(0, "warehouse_id", pJson["warehouse_id"], err, false))
            return false;
    } else {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if (pJson.isMember("name")) {
        if (!validJsonOfField(1, "name", pJson["name"], err, false))
            return false;
    }
    if (pJson.isMember("location")) {
        if (!validJsonOfField(2, "location", pJson["location"], err, false))
            return false;
    }
    if (pJson.isMember("capacity")) {
        if (!validJsonOfField(3, "capacity", pJson["capacity"], err, false))
            return false;
    }
    return true;
}
bool Warehouses::validateMasqueradedJsonForUpdate(
    const Json::Value& pJson, const std::vector<std::string>& pMasqueradingVector,
    std::string& err) {
    if (pMasqueradingVector.size() != 4) {
        err = "Bad masquerading vector";
        return false;
    }
    try {
        if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0])) {
            if (!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err,
                                  false))
                return false;
        } else {
            err = "The value of primary key must be set in the json object for update";
            return false;
        }
        if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1])) {
            if (!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err,
                                  false))
                return false;
        }
        if (!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2])) {
            if (!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err,
                                  false))
                return false;
        }
        if (!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3])) {
            if (!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err,
                                  false))
                return false;
        }
    } catch (const Json::LogicError& e) {
        err = e.what();
        return false;
    }
    return true;
}
bool Warehouses::validJsonOfField(size_t index, const std::string& fieldName,
                                  const Json::Value& pJson, std::string& err, bool isForCreation) {
    switch (index) {
        case 0:
            if (isForCreation) {
                err = "The automatic primary key cannot be set";
                return false;
            }
            if (pJson.isNull()) {
                return true;
            }
            if (!pJson.isInt64()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 1:
            if (pJson.isNull()) {
                err = "The " + fieldName + " column cannot be null";
                return false;
            }
            if (!pJson.isString()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 2:
            if (pJson.isNull()) {
                err = "The " + fieldName + " column cannot be null";
                return false;
            }
            if (!pJson.isString()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 3:
            if (pJson.isNull()) {
                err = "The " + fieldName + " column cannot be null";
                return false;
            }
            if (!pJson.isInt64()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        default:
            err = "Internal error in the server";
            return false;
    }
    return true;
}
