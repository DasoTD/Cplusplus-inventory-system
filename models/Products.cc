/**
 *
 *  Products.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Products.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::sqlite3;

const std::string Products::Cols::_product_id = "product_id";
const std::string Products::Cols::_sku = "sku";
const std::string Products::Cols::_name = "name";
const std::string Products::Cols::_description = "description";
const std::string Products::Cols::_reorder_threshold = "reorder_threshold";
const std::string Products::Cols::_quantity_in_stock = "quantity_in_stock";
const std::string Products::Cols::_supplier_id = "supplier_id";
const std::string Products::Cols::_warehouse_id = "warehouse_id";
const std::string Products::primaryKeyName = "product_id";
const bool Products::hasPrimaryKey = true;
const std::string Products::tableName = "products";

const std::vector<typename Products::MetaData> Products::metaData_ = {
    {"product_id", "int64_t", "integer", 8, 1, 1, 0},
    {"sku", "std::string", "text", 0, 0, 0, 1},
    {"name", "std::string", "text", 0, 0, 0, 1},
    {"description", "std::string", "text", 0, 0, 0, 0},
    {"reorder_threshold", "int64_t", "integer", 8, 0, 0, 1},
    {"quantity_in_stock", "int64_t", "integer", 8, 0, 0, 1},
    {"supplier_id", "int64_t", "integer", 8, 0, 0, 0},
    {"warehouse_id", "int64_t", "integer", 8, 0, 0, 0}};
const std::string& Products::getColumnName(size_t index) noexcept(false) {
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Products::Products(const Row& r, const ssize_t indexOffset) noexcept {
    if (indexOffset < 0) {
        if (!r["product_id"].isNull()) {
            productId_ = std::make_shared<int64_t>(r["product_id"].as<int64_t>());
        }
        if (!r["sku"].isNull()) {
            sku_ = std::make_shared<std::string>(r["sku"].as<std::string>());
        }
        if (!r["name"].isNull()) {
            name_ = std::make_shared<std::string>(r["name"].as<std::string>());
        }
        if (!r["description"].isNull()) {
            description_ = std::make_shared<std::string>(r["description"].as<std::string>());
        }
        if (!r["reorder_threshold"].isNull()) {
            reorderThreshold_ = std::make_shared<int64_t>(r["reorder_threshold"].as<int64_t>());
        }
        if (!r["quantity_in_stock"].isNull()) {
            quantityInStock_ = std::make_shared<int64_t>(r["quantity_in_stock"].as<int64_t>());
        }
        if (!r["supplier_id"].isNull()) {
            supplierId_ = std::make_shared<int64_t>(r["supplier_id"].as<int64_t>());
        }
        if (!r["warehouse_id"].isNull()) {
            warehouseId_ = std::make_shared<int64_t>(r["warehouse_id"].as<int64_t>());
        }
    } else {
        size_t offset = (size_t)indexOffset;
        if (offset + 8 > r.size()) {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if (!r[index].isNull()) {
            productId_ = std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 1;
        if (!r[index].isNull()) {
            sku_ = std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if (!r[index].isNull()) {
            name_ = std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if (!r[index].isNull()) {
            description_ = std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if (!r[index].isNull()) {
            reorderThreshold_ = std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 5;
        if (!r[index].isNull()) {
            quantityInStock_ = std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 6;
        if (!r[index].isNull()) {
            supplierId_ = std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 7;
        if (!r[index].isNull()) {
            warehouseId_ = std::make_shared<int64_t>(r[index].as<int64_t>());
        }
    }
}

Products::Products(const Json::Value& pJson,
                   const std::vector<std::string>& pMasqueradingVector) noexcept(false) {
    if (pMasqueradingVector.size() != 8) {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0])) {
        dirtyFlag_[0] = true;
        if (!pJson[pMasqueradingVector[0]].isNull()) {
            productId_ =
                std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1])) {
        dirtyFlag_[1] = true;
        if (!pJson[pMasqueradingVector[1]].isNull()) {
            sku_ = std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if (!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2])) {
        dirtyFlag_[2] = true;
        if (!pJson[pMasqueradingVector[2]].isNull()) {
            name_ = std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if (!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3])) {
        dirtyFlag_[3] = true;
        if (!pJson[pMasqueradingVector[3]].isNull()) {
            description_ = std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if (!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4])) {
        dirtyFlag_[4] = true;
        if (!pJson[pMasqueradingVector[4]].isNull()) {
            reorderThreshold_ =
                std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if (!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5])) {
        dirtyFlag_[5] = true;
        if (!pJson[pMasqueradingVector[5]].isNull()) {
            quantityInStock_ =
                std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if (!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6])) {
        dirtyFlag_[6] = true;
        if (!pJson[pMasqueradingVector[6]].isNull()) {
            supplierId_ =
                std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if (!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7])) {
        dirtyFlag_[7] = true;
        if (!pJson[pMasqueradingVector[7]].isNull()) {
            warehouseId_ =
                std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
}

Products::Products(const Json::Value& pJson) noexcept(false) {
    if (pJson.isMember("product_id")) {
        dirtyFlag_[0] = true;
        if (!pJson["product_id"].isNull()) {
            productId_ = std::make_shared<int64_t>((int64_t)pJson["product_id"].asInt64());
        }
    }
    if (pJson.isMember("sku")) {
        dirtyFlag_[1] = true;
        if (!pJson["sku"].isNull()) {
            sku_ = std::make_shared<std::string>(pJson["sku"].asString());
        }
    }
    if (pJson.isMember("name")) {
        dirtyFlag_[2] = true;
        if (!pJson["name"].isNull()) {
            name_ = std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if (pJson.isMember("description")) {
        dirtyFlag_[3] = true;
        if (!pJson["description"].isNull()) {
            description_ = std::make_shared<std::string>(pJson["description"].asString());
        }
    }
    if (pJson.isMember("reorder_threshold")) {
        dirtyFlag_[4] = true;
        if (!pJson["reorder_threshold"].isNull()) {
            reorderThreshold_ =
                std::make_shared<int64_t>((int64_t)pJson["reorder_threshold"].asInt64());
        }
    }
    if (pJson.isMember("quantity_in_stock")) {
        dirtyFlag_[5] = true;
        if (!pJson["quantity_in_stock"].isNull()) {
            quantityInStock_ =
                std::make_shared<int64_t>((int64_t)pJson["quantity_in_stock"].asInt64());
        }
    }
    if (pJson.isMember("supplier_id")) {
        dirtyFlag_[6] = true;
        if (!pJson["supplier_id"].isNull()) {
            supplierId_ = std::make_shared<int64_t>((int64_t)pJson["supplier_id"].asInt64());
        }
    }
    if (pJson.isMember("warehouse_id")) {
        dirtyFlag_[7] = true;
        if (!pJson["warehouse_id"].isNull()) {
            warehouseId_ = std::make_shared<int64_t>((int64_t)pJson["warehouse_id"].asInt64());
        }
    }
}

void Products::updateByMasqueradedJson(
    const Json::Value& pJson, const std::vector<std::string>& pMasqueradingVector) noexcept(false) {
    if (pMasqueradingVector.size() != 8) {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0])) {
        if (!pJson[pMasqueradingVector[0]].isNull()) {
            productId_ =
                std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1])) {
        dirtyFlag_[1] = true;
        if (!pJson[pMasqueradingVector[1]].isNull()) {
            sku_ = std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if (!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2])) {
        dirtyFlag_[2] = true;
        if (!pJson[pMasqueradingVector[2]].isNull()) {
            name_ = std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if (!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3])) {
        dirtyFlag_[3] = true;
        if (!pJson[pMasqueradingVector[3]].isNull()) {
            description_ = std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if (!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4])) {
        dirtyFlag_[4] = true;
        if (!pJson[pMasqueradingVector[4]].isNull()) {
            reorderThreshold_ =
                std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if (!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5])) {
        dirtyFlag_[5] = true;
        if (!pJson[pMasqueradingVector[5]].isNull()) {
            quantityInStock_ =
                std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if (!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6])) {
        dirtyFlag_[6] = true;
        if (!pJson[pMasqueradingVector[6]].isNull()) {
            supplierId_ =
                std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if (!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7])) {
        dirtyFlag_[7] = true;
        if (!pJson[pMasqueradingVector[7]].isNull()) {
            warehouseId_ =
                std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
}

void Products::updateByJson(const Json::Value& pJson) noexcept(false) {
    if (pJson.isMember("product_id")) {
        if (!pJson["product_id"].isNull()) {
            productId_ = std::make_shared<int64_t>((int64_t)pJson["product_id"].asInt64());
        }
    }
    if (pJson.isMember("sku")) {
        dirtyFlag_[1] = true;
        if (!pJson["sku"].isNull()) {
            sku_ = std::make_shared<std::string>(pJson["sku"].asString());
        }
    }
    if (pJson.isMember("name")) {
        dirtyFlag_[2] = true;
        if (!pJson["name"].isNull()) {
            name_ = std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if (pJson.isMember("description")) {
        dirtyFlag_[3] = true;
        if (!pJson["description"].isNull()) {
            description_ = std::make_shared<std::string>(pJson["description"].asString());
        }
    }
    if (pJson.isMember("reorder_threshold")) {
        dirtyFlag_[4] = true;
        if (!pJson["reorder_threshold"].isNull()) {
            reorderThreshold_ =
                std::make_shared<int64_t>((int64_t)pJson["reorder_threshold"].asInt64());
        }
    }
    if (pJson.isMember("quantity_in_stock")) {
        dirtyFlag_[5] = true;
        if (!pJson["quantity_in_stock"].isNull()) {
            quantityInStock_ =
                std::make_shared<int64_t>((int64_t)pJson["quantity_in_stock"].asInt64());
        }
    }
    if (pJson.isMember("supplier_id")) {
        dirtyFlag_[6] = true;
        if (!pJson["supplier_id"].isNull()) {
            supplierId_ = std::make_shared<int64_t>((int64_t)pJson["supplier_id"].asInt64());
        }
    }
    if (pJson.isMember("warehouse_id")) {
        dirtyFlag_[7] = true;
        if (!pJson["warehouse_id"].isNull()) {
            warehouseId_ = std::make_shared<int64_t>((int64_t)pJson["warehouse_id"].asInt64());
        }
    }
}

const int64_t& Products::getValueOfProductId() const noexcept {
    static const int64_t defaultValue = int64_t();
    if (productId_)
        return *productId_;
    return defaultValue;
}
const std::shared_ptr<int64_t>& Products::getProductId() const noexcept {
    return productId_;
}
void Products::setProductId(const int64_t& pProductId) noexcept {
    productId_ = std::make_shared<int64_t>(pProductId);
    dirtyFlag_[0] = true;
}
void Products::setProductIdToNull() noexcept {
    productId_.reset();
    dirtyFlag_[0] = true;
}
const typename Products::PrimaryKeyType& Products::getPrimaryKey() const {
    assert(productId_);
    return *productId_;
}

const std::string& Products::getValueOfSku() const noexcept {
    static const std::string defaultValue = std::string();
    if (sku_)
        return *sku_;
    return defaultValue;
}
const std::shared_ptr<std::string>& Products::getSku() const noexcept {
    return sku_;
}
void Products::setSku(const std::string& pSku) noexcept {
    sku_ = std::make_shared<std::string>(pSku);
    dirtyFlag_[1] = true;
}
void Products::setSku(std::string&& pSku) noexcept {
    sku_ = std::make_shared<std::string>(std::move(pSku));
    dirtyFlag_[1] = true;
}

const std::string& Products::getValueOfName() const noexcept {
    static const std::string defaultValue = std::string();
    if (name_)
        return *name_;
    return defaultValue;
}
const std::shared_ptr<std::string>& Products::getName() const noexcept {
    return name_;
}
void Products::setName(const std::string& pName) noexcept {
    name_ = std::make_shared<std::string>(pName);
    dirtyFlag_[2] = true;
}
void Products::setName(std::string&& pName) noexcept {
    name_ = std::make_shared<std::string>(std::move(pName));
    dirtyFlag_[2] = true;
}

const std::string& Products::getValueOfDescription() const noexcept {
    static const std::string defaultValue = std::string();
    if (description_)
        return *description_;
    return defaultValue;
}
const std::shared_ptr<std::string>& Products::getDescription() const noexcept {
    return description_;
}
void Products::setDescription(const std::string& pDescription) noexcept {
    description_ = std::make_shared<std::string>(pDescription);
    dirtyFlag_[3] = true;
}
void Products::setDescription(std::string&& pDescription) noexcept {
    description_ = std::make_shared<std::string>(std::move(pDescription));
    dirtyFlag_[3] = true;
}
void Products::setDescriptionToNull() noexcept {
    description_.reset();
    dirtyFlag_[3] = true;
}

const int64_t& Products::getValueOfReorderThreshold() const noexcept {
    static const int64_t defaultValue = int64_t();
    if (reorderThreshold_)
        return *reorderThreshold_;
    return defaultValue;
}
const std::shared_ptr<int64_t>& Products::getReorderThreshold() const noexcept {
    return reorderThreshold_;
}
void Products::setReorderThreshold(const int64_t& pReorderThreshold) noexcept {
    reorderThreshold_ = std::make_shared<int64_t>(pReorderThreshold);
    dirtyFlag_[4] = true;
}

const int64_t& Products::getValueOfQuantityInStock() const noexcept {
    static const int64_t defaultValue = int64_t();
    if (quantityInStock_)
        return *quantityInStock_;
    return defaultValue;
}
const std::shared_ptr<int64_t>& Products::getQuantityInStock() const noexcept {
    return quantityInStock_;
}
void Products::setQuantityInStock(const int64_t& pQuantityInStock) noexcept {
    quantityInStock_ = std::make_shared<int64_t>(pQuantityInStock);
    dirtyFlag_[5] = true;
}

const int64_t& Products::getValueOfSupplierId() const noexcept {
    static const int64_t defaultValue = int64_t();
    if (supplierId_)
        return *supplierId_;
    return defaultValue;
}
const std::shared_ptr<int64_t>& Products::getSupplierId() const noexcept {
    return supplierId_;
}
void Products::setSupplierId(const int64_t& pSupplierId) noexcept {
    supplierId_ = std::make_shared<int64_t>(pSupplierId);
    dirtyFlag_[6] = true;
}
void Products::setSupplierIdToNull() noexcept {
    supplierId_.reset();
    dirtyFlag_[6] = true;
}

const int64_t& Products::getValueOfWarehouseId() const noexcept {
    static const int64_t defaultValue = int64_t();
    if (warehouseId_)
        return *warehouseId_;
    return defaultValue;
}
const std::shared_ptr<int64_t>& Products::getWarehouseId() const noexcept {
    return warehouseId_;
}
void Products::setWarehouseId(const int64_t& pWarehouseId) noexcept {
    warehouseId_ = std::make_shared<int64_t>(pWarehouseId);
    dirtyFlag_[7] = true;
}
void Products::setWarehouseIdToNull() noexcept {
    warehouseId_.reset();
    dirtyFlag_[7] = true;
}

void Products::updateId(const uint64_t id) {
    productId_ = std::make_shared<int64_t>(static_cast<int64_t>(id));
}

const std::vector<std::string>& Products::insertColumns() noexcept {
    static const std::vector<std::string> inCols = {
        "sku",         "name",        "description", "reorder_threshold", "quantity_in_stock",
        "supplier_id", "warehouse_id"};
    return inCols;
}

void Products::outputArgs(drogon::orm::internal::SqlBinder& binder) const {
    if (dirtyFlag_[1]) {
        if (getSku()) {
            binder << getValueOfSku();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[2]) {
        if (getName()) {
            binder << getValueOfName();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[3]) {
        if (getDescription()) {
            binder << getValueOfDescription();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[4]) {
        if (getReorderThreshold()) {
            binder << getValueOfReorderThreshold();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[5]) {
        if (getQuantityInStock()) {
            binder << getValueOfQuantityInStock();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[6]) {
        if (getSupplierId()) {
            binder << getValueOfSupplierId();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[7]) {
        if (getWarehouseId()) {
            binder << getValueOfWarehouseId();
        } else {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Products::updateColumns() const {
    std::vector<std::string> ret;
    if (dirtyFlag_[1]) {
        ret.push_back(getColumnName(1));
    }
    if (dirtyFlag_[2]) {
        ret.push_back(getColumnName(2));
    }
    if (dirtyFlag_[3]) {
        ret.push_back(getColumnName(3));
    }
    if (dirtyFlag_[4]) {
        ret.push_back(getColumnName(4));
    }
    if (dirtyFlag_[5]) {
        ret.push_back(getColumnName(5));
    }
    if (dirtyFlag_[6]) {
        ret.push_back(getColumnName(6));
    }
    if (dirtyFlag_[7]) {
        ret.push_back(getColumnName(7));
    }
    return ret;
}

void Products::updateArgs(drogon::orm::internal::SqlBinder& binder) const {
    if (dirtyFlag_[1]) {
        if (getSku()) {
            binder << getValueOfSku();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[2]) {
        if (getName()) {
            binder << getValueOfName();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[3]) {
        if (getDescription()) {
            binder << getValueOfDescription();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[4]) {
        if (getReorderThreshold()) {
            binder << getValueOfReorderThreshold();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[5]) {
        if (getQuantityInStock()) {
            binder << getValueOfQuantityInStock();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[6]) {
        if (getSupplierId()) {
            binder << getValueOfSupplierId();
        } else {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[7]) {
        if (getWarehouseId()) {
            binder << getValueOfWarehouseId();
        } else {
            binder << nullptr;
        }
    }
}
Json::Value Products::toJson() const {
    Json::Value ret;
    if (getProductId()) {
        ret["product_id"] = (Json::Int64)getValueOfProductId();
    } else {
        ret["product_id"] = Json::Value();
    }
    if (getSku()) {
        ret["sku"] = getValueOfSku();
    } else {
        ret["sku"] = Json::Value();
    }
    if (getName()) {
        ret["name"] = getValueOfName();
    } else {
        ret["name"] = Json::Value();
    }
    if (getDescription()) {
        ret["description"] = getValueOfDescription();
    } else {
        ret["description"] = Json::Value();
    }
    if (getReorderThreshold()) {
        ret["reorder_threshold"] = (Json::Int64)getValueOfReorderThreshold();
    } else {
        ret["reorder_threshold"] = Json::Value();
    }
    if (getQuantityInStock()) {
        ret["quantity_in_stock"] = (Json::Int64)getValueOfQuantityInStock();
    } else {
        ret["quantity_in_stock"] = Json::Value();
    }
    if (getSupplierId()) {
        ret["supplier_id"] = (Json::Int64)getValueOfSupplierId();
    } else {
        ret["supplier_id"] = Json::Value();
    }
    if (getWarehouseId()) {
        ret["warehouse_id"] = (Json::Int64)getValueOfWarehouseId();
    } else {
        ret["warehouse_id"] = Json::Value();
    }
    return ret;
}

std::string Products::toString() const {
    return toJson().toStyledString();
}

Json::Value Products::toMasqueradedJson(const std::vector<std::string>& pMasqueradingVector) const {
    Json::Value ret;
    if (pMasqueradingVector.size() == 8) {
        if (!pMasqueradingVector[0].empty()) {
            if (getProductId()) {
                ret[pMasqueradingVector[0]] = (Json::Int64)getValueOfProductId();
            } else {
                ret[pMasqueradingVector[0]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[1].empty()) {
            if (getSku()) {
                ret[pMasqueradingVector[1]] = getValueOfSku();
            } else {
                ret[pMasqueradingVector[1]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[2].empty()) {
            if (getName()) {
                ret[pMasqueradingVector[2]] = getValueOfName();
            } else {
                ret[pMasqueradingVector[2]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[3].empty()) {
            if (getDescription()) {
                ret[pMasqueradingVector[3]] = getValueOfDescription();
            } else {
                ret[pMasqueradingVector[3]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[4].empty()) {
            if (getReorderThreshold()) {
                ret[pMasqueradingVector[4]] = (Json::Int64)getValueOfReorderThreshold();
            } else {
                ret[pMasqueradingVector[4]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[5].empty()) {
            if (getQuantityInStock()) {
                ret[pMasqueradingVector[5]] = (Json::Int64)getValueOfQuantityInStock();
            } else {
                ret[pMasqueradingVector[5]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[6].empty()) {
            if (getSupplierId()) {
                ret[pMasqueradingVector[6]] = (Json::Int64)getValueOfSupplierId();
            } else {
                ret[pMasqueradingVector[6]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[7].empty()) {
            if (getWarehouseId()) {
                ret[pMasqueradingVector[7]] = (Json::Int64)getValueOfWarehouseId();
            } else {
                ret[pMasqueradingVector[7]] = Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if (getProductId()) {
        ret["product_id"] = (Json::Int64)getValueOfProductId();
    } else {
        ret["product_id"] = Json::Value();
    }
    if (getSku()) {
        ret["sku"] = getValueOfSku();
    } else {
        ret["sku"] = Json::Value();
    }
    if (getName()) {
        ret["name"] = getValueOfName();
    } else {
        ret["name"] = Json::Value();
    }
    if (getDescription()) {
        ret["description"] = getValueOfDescription();
    } else {
        ret["description"] = Json::Value();
    }
    if (getReorderThreshold()) {
        ret["reorder_threshold"] = (Json::Int64)getValueOfReorderThreshold();
    } else {
        ret["reorder_threshold"] = Json::Value();
    }
    if (getQuantityInStock()) {
        ret["quantity_in_stock"] = (Json::Int64)getValueOfQuantityInStock();
    } else {
        ret["quantity_in_stock"] = Json::Value();
    }
    if (getSupplierId()) {
        ret["supplier_id"] = (Json::Int64)getValueOfSupplierId();
    } else {
        ret["supplier_id"] = Json::Value();
    }
    if (getWarehouseId()) {
        ret["warehouse_id"] = (Json::Int64)getValueOfWarehouseId();
    } else {
        ret["warehouse_id"] = Json::Value();
    }
    return ret;
}

bool Products::validateJsonForCreation(const Json::Value& pJson, std::string& err) {
    if (pJson.isMember("product_id")) {
        if (!validJsonOfField(0, "product_id", pJson["product_id"], err, true))
            return false;
    }
    if (pJson.isMember("sku")) {
        if (!validJsonOfField(1, "sku", pJson["sku"], err, true))
            return false;
    } else {
        err = "The sku column cannot be null";
        return false;
    }
    if (pJson.isMember("name")) {
        if (!validJsonOfField(2, "name", pJson["name"], err, true))
            return false;
    } else {
        err = "The name column cannot be null";
        return false;
    }
    if (pJson.isMember("description")) {
        if (!validJsonOfField(3, "description", pJson["description"], err, true))
            return false;
    }
    if (pJson.isMember("reorder_threshold")) {
        if (!validJsonOfField(4, "reorder_threshold", pJson["reorder_threshold"], err, true))
            return false;
    } else {
        err = "The reorder_threshold column cannot be null";
        return false;
    }
    if (pJson.isMember("quantity_in_stock")) {
        if (!validJsonOfField(5, "quantity_in_stock", pJson["quantity_in_stock"], err, true))
            return false;
    } else {
        err = "The quantity_in_stock column cannot be null";
        return false;
    }
    if (pJson.isMember("supplier_id")) {
        if (!validJsonOfField(6, "supplier_id", pJson["supplier_id"], err, true))
            return false;
    }
    if (pJson.isMember("warehouse_id")) {
        if (!validJsonOfField(7, "warehouse_id", pJson["warehouse_id"], err, true))
            return false;
    }
    return true;
}
bool Products::validateMasqueradedJsonForCreation(
    const Json::Value& pJson, const std::vector<std::string>& pMasqueradingVector,
    std::string& err) {
    if (pMasqueradingVector.size() != 8) {
        err = "Bad masquerading vector";
        return false;
    }
    try {
        if (!pMasqueradingVector[0].empty()) {
            if (pJson.isMember(pMasqueradingVector[0])) {
                if (!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err,
                                      true))
                    return false;
            }
        }
        if (!pMasqueradingVector[1].empty()) {
            if (pJson.isMember(pMasqueradingVector[1])) {
                if (!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err,
                                      true))
                    return false;
            } else {
                err = "The " + pMasqueradingVector[1] + " column cannot be null";
                return false;
            }
        }
        if (!pMasqueradingVector[2].empty()) {
            if (pJson.isMember(pMasqueradingVector[2])) {
                if (!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err,
                                      true))
                    return false;
            } else {
                err = "The " + pMasqueradingVector[2] + " column cannot be null";
                return false;
            }
        }
        if (!pMasqueradingVector[3].empty()) {
            if (pJson.isMember(pMasqueradingVector[3])) {
                if (!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err,
                                      true))
                    return false;
            }
        }
        if (!pMasqueradingVector[4].empty()) {
            if (pJson.isMember(pMasqueradingVector[4])) {
                if (!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err,
                                      true))
                    return false;
            } else {
                err = "The " + pMasqueradingVector[4] + " column cannot be null";
                return false;
            }
        }
        if (!pMasqueradingVector[5].empty()) {
            if (pJson.isMember(pMasqueradingVector[5])) {
                if (!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err,
                                      true))
                    return false;
            } else {
                err = "The " + pMasqueradingVector[5] + " column cannot be null";
                return false;
            }
        }
        if (!pMasqueradingVector[6].empty()) {
            if (pJson.isMember(pMasqueradingVector[6])) {
                if (!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err,
                                      true))
                    return false;
            }
        }
        if (!pMasqueradingVector[7].empty()) {
            if (pJson.isMember(pMasqueradingVector[7])) {
                if (!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err,
                                      true))
                    return false;
            }
        }
    } catch (const Json::LogicError& e) {
        err = e.what();
        return false;
    }
    return true;
}
bool Products::validateJsonForUpdate(const Json::Value& pJson, std::string& err) {
    if (pJson.isMember("product_id")) {
        if (!validJsonOfField(0, "product_id", pJson["product_id"], err, false))
            return false;
    } else {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if (pJson.isMember("sku")) {
        if (!validJsonOfField(1, "sku", pJson["sku"], err, false))
            return false;
    }
    if (pJson.isMember("name")) {
        if (!validJsonOfField(2, "name", pJson["name"], err, false))
            return false;
    }
    if (pJson.isMember("description")) {
        if (!validJsonOfField(3, "description", pJson["description"], err, false))
            return false;
    }
    if (pJson.isMember("reorder_threshold")) {
        if (!validJsonOfField(4, "reorder_threshold", pJson["reorder_threshold"], err, false))
            return false;
    }
    if (pJson.isMember("quantity_in_stock")) {
        if (!validJsonOfField(5, "quantity_in_stock", pJson["quantity_in_stock"], err, false))
            return false;
    }
    if (pJson.isMember("supplier_id")) {
        if (!validJsonOfField(6, "supplier_id", pJson["supplier_id"], err, false))
            return false;
    }
    if (pJson.isMember("warehouse_id")) {
        if (!validJsonOfField(7, "warehouse_id", pJson["warehouse_id"], err, false))
            return false;
    }
    return true;
}
bool Products::validateMasqueradedJsonForUpdate(const Json::Value& pJson,
                                                const std::vector<std::string>& pMasqueradingVector,
                                                std::string& err) {
    if (pMasqueradingVector.size() != 8) {
        err = "Bad masquerading vector";
        return false;
    }
    try {
        if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0])) {
            if (!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err,
                                  false))
                return false;
        } else {
            err = "The value of primary key must be set in the json object for update";
            return false;
        }
        if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1])) {
            if (!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err,
                                  false))
                return false;
        }
        if (!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2])) {
            if (!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err,
                                  false))
                return false;
        }
        if (!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3])) {
            if (!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err,
                                  false))
                return false;
        }
        if (!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4])) {
            if (!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err,
                                  false))
                return false;
        }
        if (!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5])) {
            if (!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err,
                                  false))
                return false;
        }
        if (!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6])) {
            if (!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err,
                                  false))
                return false;
        }
        if (!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7])) {
            if (!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err,
                                  false))
                return false;
        }
    } catch (const Json::LogicError& e) {
        err = e.what();
        return false;
    }
    return true;
}
bool Products::validJsonOfField(size_t index, const std::string& fieldName,
                                const Json::Value& pJson, std::string& err, bool isForCreation) {
    switch (index) {
        case 0:
            if (isForCreation) {
                err = "The automatic primary key cannot be set";
                return false;
            }
            if (pJson.isNull()) {
                return true;
            }
            if (!pJson.isInt64()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 1:
            if (pJson.isNull()) {
                err = "The " + fieldName + " column cannot be null";
                return false;
            }
            if (!pJson.isString()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 2:
            if (pJson.isNull()) {
                err = "The " + fieldName + " column cannot be null";
                return false;
            }
            if (!pJson.isString()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 3:
            if (pJson.isNull()) {
                return true;
            }
            if (!pJson.isString()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 4:
            if (pJson.isNull()) {
                err = "The " + fieldName + " column cannot be null";
                return false;
            }
            if (!pJson.isInt64()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 5:
            if (pJson.isNull()) {
                err = "The " + fieldName + " column cannot be null";
                return false;
            }
            if (!pJson.isInt64()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 6:
            if (pJson.isNull()) {
                return true;
            }
            if (!pJson.isInt64()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        case 7:
            if (pJson.isNull()) {
                return true;
            }
            if (!pJson.isInt64()) {
                err = "Type error in the " + fieldName + " field";
                return false;
            }
            break;
        default:
            err = "Internal error in the server";
            return false;
    }
    return true;
}
