/**
 *
 *  Warehouses.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/BaseBuilder.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/Mapper.h>
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/SqlBinder.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <json/json.h>
#include <stdint.h>
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <iostream>
#include <memory>
#include <string>
#include <string_view>
#include <tuple>
#include <vector>

namespace drogon {
namespace orm {
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}  // namespace orm
}  // namespace drogon
namespace drogon_model {
namespace sqlite3 {

class Warehouses {
  public:
    struct Cols {
        static const std::string _warehouse_id;
        static const std::string _name;
        static const std::string _location;
        static const std::string _capacity;
    };

    static const int primaryKeyNumber;
    static const std::string tableName;
    static const bool hasPrimaryKey;
    static const std::string primaryKeyName;
    using PrimaryKeyType = int64_t;
    const PrimaryKeyType& getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names,
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all
     * columns by an asterisk), please set the offset to -1.
     */
    explicit Warehouses(const drogon::orm::Row& r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit Warehouses(const Json::Value& pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    Warehouses(const Json::Value& pJson,
               const std::vector<std::string>& pMasqueradingVector) noexcept(false);

    Warehouses() = default;

    void updateByJson(const Json::Value& pJson) noexcept(false);
    void updateByMasqueradedJson(
        const Json::Value& pJson,
        const std::vector<std::string>& pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value& pJson, std::string& err);
    static bool validateMasqueradedJsonForCreation(
        const Json::Value&, const std::vector<std::string>& pMasqueradingVector, std::string& err);
    static bool validateJsonForUpdate(const Json::Value& pJson, std::string& err);
    static bool validateMasqueradedJsonForUpdate(
        const Json::Value&, const std::vector<std::string>& pMasqueradingVector, std::string& err);
    static bool validJsonOfField(size_t index, const std::string& fieldName,
                                 const Json::Value& pJson, std::string& err, bool isForCreation);

    /**  For column warehouse_id  */
    /// Get the value of the column warehouse_id, returns the default value if the column is null
    const int64_t& getValueOfWarehouseId() const noexcept;
    /// Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object
    /// if the column is null
    const std::shared_ptr<int64_t>& getWarehouseId() const noexcept;
    /// Set the value of the column warehouse_id
    void setWarehouseId(const int64_t& pWarehouseId) noexcept;
    void setWarehouseIdToNull() noexcept;

    /**  For column name  */
    /// Get the value of the column name, returns the default value if the column is null
    const std::string& getValueOfName() const noexcept;
    /// Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object
    /// if the column is null
    const std::shared_ptr<std::string>& getName() const noexcept;
    /// Set the value of the column name
    void setName(const std::string& pName) noexcept;
    void setName(std::string&& pName) noexcept;

    /**  For column location  */
    /// Get the value of the column location, returns the default value if the column is null
    const std::string& getValueOfLocation() const noexcept;
    /// Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object
    /// if the column is null
    const std::shared_ptr<std::string>& getLocation() const noexcept;
    /// Set the value of the column location
    void setLocation(const std::string& pLocation) noexcept;
    void setLocation(std::string&& pLocation) noexcept;

    /**  For column capacity  */
    /// Get the value of the column capacity, returns the default value if the column is null
    const int64_t& getValueOfCapacity() const noexcept;
    /// Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object
    /// if the column is null
    const std::shared_ptr<int64_t>& getCapacity() const noexcept;
    /// Set the value of the column capacity
    void setCapacity(const int64_t& pCapacity) noexcept;

    static size_t getColumnNumber() noexcept {
        return 4;
    }
    static const std::string& getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    std::string toString() const;
    Json::Value toMasqueradedJson(const std::vector<std::string>& pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend drogon::orm::Mapper<Warehouses>;
    friend drogon::orm::BaseBuilder<Warehouses, true, true>;
    friend drogon::orm::BaseBuilder<Warehouses, true, false>;
    friend drogon::orm::BaseBuilder<Warehouses, false, true>;
    friend drogon::orm::BaseBuilder<Warehouses, false, false>;
#ifdef __cpp_impl_coroutine
    friend drogon::orm::CoroMapper<Warehouses>;
#endif
    static const std::vector<std::string>& insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder& binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder& binder) const;
    /// For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<int64_t> warehouseId_;
    std::shared_ptr<std::string> name_;
    std::shared_ptr<std::string> location_;
    std::shared_ptr<int64_t> capacity_;
    struct MetaData {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[4] = {false};

  public:
    static const std::string& sqlForFindingByPrimaryKey() {
        static const std::string sql = "select * from " + tableName + " where warehouse_id = ?";
        return sql;
    }

    static const std::string& sqlForDeletingByPrimaryKey() {
        static const std::string sql = "delete from " + tableName + " where warehouse_id = ?";
        return sql;
    }
    std::string sqlForInserting(bool& needSelection) const {
        std::string sql = "insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
        if (dirtyFlag_[1]) {
            sql += "name,";
            ++parametersCount;
        }
        if (dirtyFlag_[2]) {
            sql += "location,";
            ++parametersCount;
        }
        if (dirtyFlag_[3]) {
            sql += "capacity,";
            ++parametersCount;
        }
        if (parametersCount > 0) {
            sql[sql.length() - 1] = ')';
            sql += " values (";
        } else
            sql += ") values (";

        if (dirtyFlag_[1]) {
            sql.append("?,");
        }
        if (dirtyFlag_[2]) {
            sql.append("?,");
        }
        if (dirtyFlag_[3]) {
            sql.append("?,");
        }
        if (parametersCount > 0) {
            sql.resize(sql.length() - 1);
        }
        sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;
    }
};
}  // namespace sqlite3
}  // namespace drogon_model
