/**
 *
 *  PurchaseOrder.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "PurchaseOrder.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::sqlite3;

const std::string PurchaseOrder::Cols::_order_id = "order_id";
const std::string PurchaseOrder::Cols::_product_id = "product_id";
const std::string PurchaseOrder::Cols::_supplier_id = "supplier_id";
const std::string PurchaseOrder::Cols::_quantity_ordered = "quantity_ordered";
const std::string PurchaseOrder::Cols::_unit_price = "unit_price";
const std::string PurchaseOrder::Cols::_total_price = "total_price";
const std::string PurchaseOrder::Cols::_order_date = "order_date";
const std::string PurchaseOrder::Cols::_expected_delivery_date = "expected_delivery_date";
const std::string PurchaseOrder::Cols::_actual_delivery_date = "actual_delivery_date";
const std::string PurchaseOrder::Cols::_status = "status";
const std::string PurchaseOrder::Cols::_created_at = "created_at";
const std::string PurchaseOrder::Cols::_updated_at = "updated_at";
const std::string PurchaseOrder::primaryKeyName = "order_id";
const bool PurchaseOrder::hasPrimaryKey = true;
const std::string PurchaseOrder::tableName = "purchase_order";

const std::vector<typename PurchaseOrder::MetaData> PurchaseOrder::metaData_={
{"order_id","int64_t","integer",8,1,1,0},
{"product_id","int64_t","integer",8,0,0,1},
{"supplier_id","int64_t","integer",8,0,0,1},
{"quantity_ordered","int64_t","integer",8,0,0,1},
{"unit_price","double","real",8,0,0,1},
{"total_price","double","real",8,0,0,1},
{"order_date","::trantor::Date","datetime",0,0,0,0},
{"expected_delivery_date","::trantor::Date","datetime",0,0,0,0},
{"actual_delivery_date","::trantor::Date","datetime",0,0,0,0},
{"status","std::string","text",0,0,0,1},
{"created_at","::trantor::Date","datetime",0,0,0,0},
{"updated_at","::trantor::Date","datetime",0,0,0,0}
};
const std::string &PurchaseOrder::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
PurchaseOrder::PurchaseOrder(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["order_id"].isNull())
        {
            orderId_=std::make_shared<int64_t>(r["order_id"].as<int64_t>());
        }
        if(!r["product_id"].isNull())
        {
            productId_=std::make_shared<int64_t>(r["product_id"].as<int64_t>());
        }
        if(!r["supplier_id"].isNull())
        {
            supplierId_=std::make_shared<int64_t>(r["supplier_id"].as<int64_t>());
        }
        if(!r["quantity_ordered"].isNull())
        {
            quantityOrdered_=std::make_shared<int64_t>(r["quantity_ordered"].as<int64_t>());
        }
        if(!r["unit_price"].isNull())
        {
            unitPrice_=std::make_shared<double>(r["unit_price"].as<double>());
        }
        if(!r["total_price"].isNull())
        {
            totalPrice_=std::make_shared<double>(r["total_price"].as<double>());
        }
        if(!r["order_date"].isNull())
        {
            auto timeStr = r["order_date"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                orderDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["expected_delivery_date"].isNull())
        {
            auto timeStr = r["expected_delivery_date"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                expectedDeliveryDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["actual_delivery_date"].isNull())
        {
            auto timeStr = r["actual_delivery_date"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                actualDeliveryDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["status"].isNull())
        {
            status_=std::make_shared<std::string>(r["status"].as<std::string>());
        }
        if(!r["created_at"].isNull())
        {
            auto timeStr = r["created_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["updated_at"].isNull())
        {
            auto timeStr = r["updated_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 12 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            orderId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            productId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            supplierId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            quantityOrdered_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            unitPrice_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            totalPrice_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                orderDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                expectedDeliveryDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                actualDeliveryDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            status_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }

}

PurchaseOrder::PurchaseOrder(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 12)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            orderId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            productId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            supplierId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            quantityOrdered_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            unitPrice_=std::make_shared<double>(pJson[pMasqueradingVector[4]].asDouble());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            totalPrice_=std::make_shared<double>(pJson[pMasqueradingVector[5]].asDouble());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[6]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                orderDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[7]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                expectedDeliveryDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[8]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                actualDeliveryDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            status_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[10]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[11]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

PurchaseOrder::PurchaseOrder(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("order_id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["order_id"].isNull())
        {
            orderId_=std::make_shared<int64_t>((int64_t)pJson["order_id"].asInt64());
        }
    }
    if(pJson.isMember("product_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["product_id"].isNull())
        {
            productId_=std::make_shared<int64_t>((int64_t)pJson["product_id"].asInt64());
        }
    }
    if(pJson.isMember("supplier_id"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["supplier_id"].isNull())
        {
            supplierId_=std::make_shared<int64_t>((int64_t)pJson["supplier_id"].asInt64());
        }
    }
    if(pJson.isMember("quantity_ordered"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["quantity_ordered"].isNull())
        {
            quantityOrdered_=std::make_shared<int64_t>((int64_t)pJson["quantity_ordered"].asInt64());
        }
    }
    if(pJson.isMember("unit_price"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["unit_price"].isNull())
        {
            unitPrice_=std::make_shared<double>(pJson["unit_price"].asDouble());
        }
    }
    if(pJson.isMember("total_price"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["total_price"].isNull())
        {
            totalPrice_=std::make_shared<double>(pJson["total_price"].asDouble());
        }
    }
    if(pJson.isMember("order_date"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["order_date"].isNull())
        {
            auto timeStr = pJson["order_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                orderDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("expected_delivery_date"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["expected_delivery_date"].isNull())
        {
            auto timeStr = pJson["expected_delivery_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                expectedDeliveryDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("actual_delivery_date"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["actual_delivery_date"].isNull())
        {
            auto timeStr = pJson["actual_delivery_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                actualDeliveryDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("status"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["status"].isNull())
        {
            status_=std::make_shared<std::string>(pJson["status"].asString());
        }
    }
    if(pJson.isMember("created_at"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("updated_at"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["updated_at"].isNull())
        {
            auto timeStr = pJson["updated_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void PurchaseOrder::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 12)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            orderId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            productId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            supplierId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            quantityOrdered_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            unitPrice_=std::make_shared<double>(pJson[pMasqueradingVector[4]].asDouble());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            totalPrice_=std::make_shared<double>(pJson[pMasqueradingVector[5]].asDouble());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[6]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                orderDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[7]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                expectedDeliveryDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[8]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                actualDeliveryDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            status_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[10]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[11]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void PurchaseOrder::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("order_id"))
    {
        if(!pJson["order_id"].isNull())
        {
            orderId_=std::make_shared<int64_t>((int64_t)pJson["order_id"].asInt64());
        }
    }
    if(pJson.isMember("product_id"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["product_id"].isNull())
        {
            productId_=std::make_shared<int64_t>((int64_t)pJson["product_id"].asInt64());
        }
    }
    if(pJson.isMember("supplier_id"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["supplier_id"].isNull())
        {
            supplierId_=std::make_shared<int64_t>((int64_t)pJson["supplier_id"].asInt64());
        }
    }
    if(pJson.isMember("quantity_ordered"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["quantity_ordered"].isNull())
        {
            quantityOrdered_=std::make_shared<int64_t>((int64_t)pJson["quantity_ordered"].asInt64());
        }
    }
    if(pJson.isMember("unit_price"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["unit_price"].isNull())
        {
            unitPrice_=std::make_shared<double>(pJson["unit_price"].asDouble());
        }
    }
    if(pJson.isMember("total_price"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["total_price"].isNull())
        {
            totalPrice_=std::make_shared<double>(pJson["total_price"].asDouble());
        }
    }
    if(pJson.isMember("order_date"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["order_date"].isNull())
        {
            auto timeStr = pJson["order_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                orderDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("expected_delivery_date"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["expected_delivery_date"].isNull())
        {
            auto timeStr = pJson["expected_delivery_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                expectedDeliveryDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("actual_delivery_date"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["actual_delivery_date"].isNull())
        {
            auto timeStr = pJson["actual_delivery_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                actualDeliveryDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("status"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["status"].isNull())
        {
            status_=std::make_shared<std::string>(pJson["status"].asString());
        }
    }
    if(pJson.isMember("created_at"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("updated_at"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["updated_at"].isNull())
        {
            auto timeStr = pJson["updated_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

const int64_t &PurchaseOrder::getValueOfOrderId() const noexcept
{
    static const int64_t defaultValue = int64_t();
    if(orderId_)
        return *orderId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &PurchaseOrder::getOrderId() const noexcept
{
    return orderId_;
}
void PurchaseOrder::setOrderId(const int64_t &pOrderId) noexcept
{
    orderId_ = std::make_shared<int64_t>(pOrderId);
    dirtyFlag_[0] = true;
}
void PurchaseOrder::setOrderIdToNull() noexcept
{
    orderId_.reset();
    dirtyFlag_[0] = true;
}
const typename PurchaseOrder::PrimaryKeyType & PurchaseOrder::getPrimaryKey() const
{
    assert(orderId_);
    return *orderId_;
}

const int64_t &PurchaseOrder::getValueOfProductId() const noexcept
{
    static const int64_t defaultValue = int64_t();
    if(productId_)
        return *productId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &PurchaseOrder::getProductId() const noexcept
{
    return productId_;
}
void PurchaseOrder::setProductId(const int64_t &pProductId) noexcept
{
    productId_ = std::make_shared<int64_t>(pProductId);
    dirtyFlag_[1] = true;
}

const int64_t &PurchaseOrder::getValueOfSupplierId() const noexcept
{
    static const int64_t defaultValue = int64_t();
    if(supplierId_)
        return *supplierId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &PurchaseOrder::getSupplierId() const noexcept
{
    return supplierId_;
}
void PurchaseOrder::setSupplierId(const int64_t &pSupplierId) noexcept
{
    supplierId_ = std::make_shared<int64_t>(pSupplierId);
    dirtyFlag_[2] = true;
}

const int64_t &PurchaseOrder::getValueOfQuantityOrdered() const noexcept
{
    static const int64_t defaultValue = int64_t();
    if(quantityOrdered_)
        return *quantityOrdered_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &PurchaseOrder::getQuantityOrdered() const noexcept
{
    return quantityOrdered_;
}
void PurchaseOrder::setQuantityOrdered(const int64_t &pQuantityOrdered) noexcept
{
    quantityOrdered_ = std::make_shared<int64_t>(pQuantityOrdered);
    dirtyFlag_[3] = true;
}

const double &PurchaseOrder::getValueOfUnitPrice() const noexcept
{
    static const double defaultValue = double();
    if(unitPrice_)
        return *unitPrice_;
    return defaultValue;
}
const std::shared_ptr<double> &PurchaseOrder::getUnitPrice() const noexcept
{
    return unitPrice_;
}
void PurchaseOrder::setUnitPrice(const double &pUnitPrice) noexcept
{
    unitPrice_ = std::make_shared<double>(pUnitPrice);
    dirtyFlag_[4] = true;
}

const double &PurchaseOrder::getValueOfTotalPrice() const noexcept
{
    static const double defaultValue = double();
    if(totalPrice_)
        return *totalPrice_;
    return defaultValue;
}
const std::shared_ptr<double> &PurchaseOrder::getTotalPrice() const noexcept
{
    return totalPrice_;
}
void PurchaseOrder::setTotalPrice(const double &pTotalPrice) noexcept
{
    totalPrice_ = std::make_shared<double>(pTotalPrice);
    dirtyFlag_[5] = true;
}

const ::trantor::Date &PurchaseOrder::getValueOfOrderDate() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(orderDate_)
        return *orderDate_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &PurchaseOrder::getOrderDate() const noexcept
{
    return orderDate_;
}
void PurchaseOrder::setOrderDate(const ::trantor::Date &pOrderDate) noexcept
{
    orderDate_ = std::make_shared<::trantor::Date>(pOrderDate);
    dirtyFlag_[6] = true;
}
void PurchaseOrder::setOrderDateToNull() noexcept
{
    orderDate_.reset();
    dirtyFlag_[6] = true;
}

const ::trantor::Date &PurchaseOrder::getValueOfExpectedDeliveryDate() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(expectedDeliveryDate_)
        return *expectedDeliveryDate_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &PurchaseOrder::getExpectedDeliveryDate() const noexcept
{
    return expectedDeliveryDate_;
}
void PurchaseOrder::setExpectedDeliveryDate(const ::trantor::Date &pExpectedDeliveryDate) noexcept
{
    expectedDeliveryDate_ = std::make_shared<::trantor::Date>(pExpectedDeliveryDate);
    dirtyFlag_[7] = true;
}
void PurchaseOrder::setExpectedDeliveryDateToNull() noexcept
{
    expectedDeliveryDate_.reset();
    dirtyFlag_[7] = true;
}

const ::trantor::Date &PurchaseOrder::getValueOfActualDeliveryDate() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(actualDeliveryDate_)
        return *actualDeliveryDate_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &PurchaseOrder::getActualDeliveryDate() const noexcept
{
    return actualDeliveryDate_;
}
void PurchaseOrder::setActualDeliveryDate(const ::trantor::Date &pActualDeliveryDate) noexcept
{
    actualDeliveryDate_ = std::make_shared<::trantor::Date>(pActualDeliveryDate);
    dirtyFlag_[8] = true;
}
void PurchaseOrder::setActualDeliveryDateToNull() noexcept
{
    actualDeliveryDate_.reset();
    dirtyFlag_[8] = true;
}

const std::string &PurchaseOrder::getValueOfStatus() const noexcept
{
    static const std::string defaultValue = std::string();
    if(status_)
        return *status_;
    return defaultValue;
}
const std::shared_ptr<std::string> &PurchaseOrder::getStatus() const noexcept
{
    return status_;
}
void PurchaseOrder::setStatus(const std::string &pStatus) noexcept
{
    status_ = std::make_shared<std::string>(pStatus);
    dirtyFlag_[9] = true;
}
void PurchaseOrder::setStatus(std::string &&pStatus) noexcept
{
    status_ = std::make_shared<std::string>(std::move(pStatus));
    dirtyFlag_[9] = true;
}

const ::trantor::Date &PurchaseOrder::getValueOfCreatedAt() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(createdAt_)
        return *createdAt_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &PurchaseOrder::getCreatedAt() const noexcept
{
    return createdAt_;
}
void PurchaseOrder::setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept
{
    createdAt_ = std::make_shared<::trantor::Date>(pCreatedAt);
    dirtyFlag_[10] = true;
}
void PurchaseOrder::setCreatedAtToNull() noexcept
{
    createdAt_.reset();
    dirtyFlag_[10] = true;
}

const ::trantor::Date &PurchaseOrder::getValueOfUpdatedAt() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(updatedAt_)
        return *updatedAt_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &PurchaseOrder::getUpdatedAt() const noexcept
{
    return updatedAt_;
}
void PurchaseOrder::setUpdatedAt(const ::trantor::Date &pUpdatedAt) noexcept
{
    updatedAt_ = std::make_shared<::trantor::Date>(pUpdatedAt);
    dirtyFlag_[11] = true;
}
void PurchaseOrder::setUpdatedAtToNull() noexcept
{
    updatedAt_.reset();
    dirtyFlag_[11] = true;
}

void PurchaseOrder::updateId(const uint64_t id)
{
    orderId_ = std::make_shared<int64_t>(static_cast<int64_t>(id));
}

const std::vector<std::string> &PurchaseOrder::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "product_id",
        "supplier_id",
        "quantity_ordered",
        "unit_price",
        "total_price",
        "order_date",
        "expected_delivery_date",
        "actual_delivery_date",
        "status",
        "created_at",
        "updated_at"
    };
    return inCols;
}

void PurchaseOrder::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getProductId())
        {
            binder << getValueOfProductId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getSupplierId())
        {
            binder << getValueOfSupplierId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getQuantityOrdered())
        {
            binder << getValueOfQuantityOrdered();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getUnitPrice())
        {
            binder << getValueOfUnitPrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getTotalPrice())
        {
            binder << getValueOfTotalPrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getOrderDate())
        {
            binder << getValueOfOrderDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getExpectedDeliveryDate())
        {
            binder << getValueOfExpectedDeliveryDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getActualDeliveryDate())
        {
            binder << getValueOfActualDeliveryDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getUpdatedAt())
        {
            binder << getValueOfUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> PurchaseOrder::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    return ret;
}

void PurchaseOrder::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getProductId())
        {
            binder << getValueOfProductId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getSupplierId())
        {
            binder << getValueOfSupplierId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getQuantityOrdered())
        {
            binder << getValueOfQuantityOrdered();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getUnitPrice())
        {
            binder << getValueOfUnitPrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getTotalPrice())
        {
            binder << getValueOfTotalPrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getOrderDate())
        {
            binder << getValueOfOrderDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getExpectedDeliveryDate())
        {
            binder << getValueOfExpectedDeliveryDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getActualDeliveryDate())
        {
            binder << getValueOfActualDeliveryDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getUpdatedAt())
        {
            binder << getValueOfUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value PurchaseOrder::toJson() const
{
    Json::Value ret;
    if(getOrderId())
    {
        ret["order_id"]=(Json::Int64)getValueOfOrderId();
    }
    else
    {
        ret["order_id"]=Json::Value();
    }
    if(getProductId())
    {
        ret["product_id"]=(Json::Int64)getValueOfProductId();
    }
    else
    {
        ret["product_id"]=Json::Value();
    }
    if(getSupplierId())
    {
        ret["supplier_id"]=(Json::Int64)getValueOfSupplierId();
    }
    else
    {
        ret["supplier_id"]=Json::Value();
    }
    if(getQuantityOrdered())
    {
        ret["quantity_ordered"]=(Json::Int64)getValueOfQuantityOrdered();
    }
    else
    {
        ret["quantity_ordered"]=Json::Value();
    }
    if(getUnitPrice())
    {
        ret["unit_price"]=getValueOfUnitPrice();
    }
    else
    {
        ret["unit_price"]=Json::Value();
    }
    if(getTotalPrice())
    {
        ret["total_price"]=getValueOfTotalPrice();
    }
    else
    {
        ret["total_price"]=Json::Value();
    }
    if(getOrderDate())
    {
        ret["order_date"]=getOrderDate()->toDbStringLocal();
    }
    else
    {
        ret["order_date"]=Json::Value();
    }
    if(getExpectedDeliveryDate())
    {
        ret["expected_delivery_date"]=getExpectedDeliveryDate()->toDbStringLocal();
    }
    else
    {
        ret["expected_delivery_date"]=Json::Value();
    }
    if(getActualDeliveryDate())
    {
        ret["actual_delivery_date"]=getActualDeliveryDate()->toDbStringLocal();
    }
    else
    {
        ret["actual_delivery_date"]=Json::Value();
    }
    if(getStatus())
    {
        ret["status"]=getValueOfStatus();
    }
    else
    {
        ret["status"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getUpdatedAt())
    {
        ret["updated_at"]=getUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["updated_at"]=Json::Value();
    }
    return ret;
}

std::string PurchaseOrder::toString() const
{
    return toJson().toStyledString();
}

Json::Value PurchaseOrder::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 12)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getOrderId())
            {
                ret[pMasqueradingVector[0]]=(Json::Int64)getValueOfOrderId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getProductId())
            {
                ret[pMasqueradingVector[1]]=(Json::Int64)getValueOfProductId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getSupplierId())
            {
                ret[pMasqueradingVector[2]]=(Json::Int64)getValueOfSupplierId();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getQuantityOrdered())
            {
                ret[pMasqueradingVector[3]]=(Json::Int64)getValueOfQuantityOrdered();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getUnitPrice())
            {
                ret[pMasqueradingVector[4]]=getValueOfUnitPrice();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getTotalPrice())
            {
                ret[pMasqueradingVector[5]]=getValueOfTotalPrice();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getOrderDate())
            {
                ret[pMasqueradingVector[6]]=getOrderDate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getExpectedDeliveryDate())
            {
                ret[pMasqueradingVector[7]]=getExpectedDeliveryDate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getActualDeliveryDate())
            {
                ret[pMasqueradingVector[8]]=getActualDeliveryDate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getStatus())
            {
                ret[pMasqueradingVector[9]]=getValueOfStatus();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getCreatedAt())
            {
                ret[pMasqueradingVector[10]]=getCreatedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getUpdatedAt())
            {
                ret[pMasqueradingVector[11]]=getUpdatedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getOrderId())
    {
        ret["order_id"]=(Json::Int64)getValueOfOrderId();
    }
    else
    {
        ret["order_id"]=Json::Value();
    }
    if(getProductId())
    {
        ret["product_id"]=(Json::Int64)getValueOfProductId();
    }
    else
    {
        ret["product_id"]=Json::Value();
    }
    if(getSupplierId())
    {
        ret["supplier_id"]=(Json::Int64)getValueOfSupplierId();
    }
    else
    {
        ret["supplier_id"]=Json::Value();
    }
    if(getQuantityOrdered())
    {
        ret["quantity_ordered"]=(Json::Int64)getValueOfQuantityOrdered();
    }
    else
    {
        ret["quantity_ordered"]=Json::Value();
    }
    if(getUnitPrice())
    {
        ret["unit_price"]=getValueOfUnitPrice();
    }
    else
    {
        ret["unit_price"]=Json::Value();
    }
    if(getTotalPrice())
    {
        ret["total_price"]=getValueOfTotalPrice();
    }
    else
    {
        ret["total_price"]=Json::Value();
    }
    if(getOrderDate())
    {
        ret["order_date"]=getOrderDate()->toDbStringLocal();
    }
    else
    {
        ret["order_date"]=Json::Value();
    }
    if(getExpectedDeliveryDate())
    {
        ret["expected_delivery_date"]=getExpectedDeliveryDate()->toDbStringLocal();
    }
    else
    {
        ret["expected_delivery_date"]=Json::Value();
    }
    if(getActualDeliveryDate())
    {
        ret["actual_delivery_date"]=getActualDeliveryDate()->toDbStringLocal();
    }
    else
    {
        ret["actual_delivery_date"]=Json::Value();
    }
    if(getStatus())
    {
        ret["status"]=getValueOfStatus();
    }
    else
    {
        ret["status"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getUpdatedAt())
    {
        ret["updated_at"]=getUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["updated_at"]=Json::Value();
    }
    return ret;
}

bool PurchaseOrder::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("order_id"))
    {
        if(!validJsonOfField(0, "order_id", pJson["order_id"], err, true))
            return false;
    }
    if(pJson.isMember("product_id"))
    {
        if(!validJsonOfField(1, "product_id", pJson["product_id"], err, true))
            return false;
    }
    else
    {
        err="The product_id column cannot be null";
        return false;
    }
    if(pJson.isMember("supplier_id"))
    {
        if(!validJsonOfField(2, "supplier_id", pJson["supplier_id"], err, true))
            return false;
    }
    else
    {
        err="The supplier_id column cannot be null";
        return false;
    }
    if(pJson.isMember("quantity_ordered"))
    {
        if(!validJsonOfField(3, "quantity_ordered", pJson["quantity_ordered"], err, true))
            return false;
    }
    else
    {
        err="The quantity_ordered column cannot be null";
        return false;
    }
    if(pJson.isMember("unit_price"))
    {
        if(!validJsonOfField(4, "unit_price", pJson["unit_price"], err, true))
            return false;
    }
    else
    {
        err="The unit_price column cannot be null";
        return false;
    }
    if(pJson.isMember("total_price"))
    {
        if(!validJsonOfField(5, "total_price", pJson["total_price"], err, true))
            return false;
    }
    else
    {
        err="The total_price column cannot be null";
        return false;
    }
    if(pJson.isMember("order_date"))
    {
        if(!validJsonOfField(6, "order_date", pJson["order_date"], err, true))
            return false;
    }
    if(pJson.isMember("expected_delivery_date"))
    {
        if(!validJsonOfField(7, "expected_delivery_date", pJson["expected_delivery_date"], err, true))
            return false;
    }
    if(pJson.isMember("actual_delivery_date"))
    {
        if(!validJsonOfField(8, "actual_delivery_date", pJson["actual_delivery_date"], err, true))
            return false;
    }
    if(pJson.isMember("status"))
    {
        if(!validJsonOfField(9, "status", pJson["status"], err, true))
            return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(10, "created_at", pJson["created_at"], err, true))
            return false;
    }
    if(pJson.isMember("updated_at"))
    {
        if(!validJsonOfField(11, "updated_at", pJson["updated_at"], err, true))
            return false;
    }
    return true;
}
bool PurchaseOrder::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                       const std::vector<std::string> &pMasqueradingVector,
                                                       std::string &err)
{
    if(pMasqueradingVector.size() != 12)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[11].empty())
      {
          if(pJson.isMember(pMasqueradingVector[11]))
          {
              if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool PurchaseOrder::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("order_id"))
    {
        if(!validJsonOfField(0, "order_id", pJson["order_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("product_id"))
    {
        if(!validJsonOfField(1, "product_id", pJson["product_id"], err, false))
            return false;
    }
    if(pJson.isMember("supplier_id"))
    {
        if(!validJsonOfField(2, "supplier_id", pJson["supplier_id"], err, false))
            return false;
    }
    if(pJson.isMember("quantity_ordered"))
    {
        if(!validJsonOfField(3, "quantity_ordered", pJson["quantity_ordered"], err, false))
            return false;
    }
    if(pJson.isMember("unit_price"))
    {
        if(!validJsonOfField(4, "unit_price", pJson["unit_price"], err, false))
            return false;
    }
    if(pJson.isMember("total_price"))
    {
        if(!validJsonOfField(5, "total_price", pJson["total_price"], err, false))
            return false;
    }
    if(pJson.isMember("order_date"))
    {
        if(!validJsonOfField(6, "order_date", pJson["order_date"], err, false))
            return false;
    }
    if(pJson.isMember("expected_delivery_date"))
    {
        if(!validJsonOfField(7, "expected_delivery_date", pJson["expected_delivery_date"], err, false))
            return false;
    }
    if(pJson.isMember("actual_delivery_date"))
    {
        if(!validJsonOfField(8, "actual_delivery_date", pJson["actual_delivery_date"], err, false))
            return false;
    }
    if(pJson.isMember("status"))
    {
        if(!validJsonOfField(9, "status", pJson["status"], err, false))
            return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(10, "created_at", pJson["created_at"], err, false))
            return false;
    }
    if(pJson.isMember("updated_at"))
    {
        if(!validJsonOfField(11, "updated_at", pJson["updated_at"], err, false))
            return false;
    }
    return true;
}
bool PurchaseOrder::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                     const std::vector<std::string> &pMasqueradingVector,
                                                     std::string &err)
{
    if(pMasqueradingVector.size() != 12)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
      if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
      {
          if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool PurchaseOrder::validJsonOfField(size_t index,
                                     const std::string &fieldName,
                                     const Json::Value &pJson,
                                     std::string &err,
                                     bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 11:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
