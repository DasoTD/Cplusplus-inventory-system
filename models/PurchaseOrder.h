/**
 *
 *  PurchaseOrder.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <drogon/orm/BaseBuilder.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <string_view>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace sqlite3
{

class PurchaseOrder
{
  public:
    struct Cols
    {
        static const std::string _order_id;
        static const std::string _product_id;
        static const std::string _supplier_id;
        static const std::string _quantity_ordered;
        static const std::string _unit_price;
        static const std::string _total_price;
        static const std::string _order_date;
        static const std::string _expected_delivery_date;
        static const std::string _actual_delivery_date;
        static const std::string _status;
        static const std::string _created_at;
        static const std::string _updated_at;
    };

    static const int primaryKeyNumber;
    static const std::string tableName;
    static const bool hasPrimaryKey;
    static const std::string primaryKeyName;
    using PrimaryKeyType = int64_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names,
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all
     * columns by an asterisk), please set the offset to -1.
     */
    explicit PurchaseOrder(const drogon::orm::Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit PurchaseOrder(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    PurchaseOrder(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    PurchaseOrder() = default;

    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson,
                          std::string &err,
                          bool isForCreation);

    /**  For column order_id  */
    ///Get the value of the column order_id, returns the default value if the column is null
    const int64_t &getValueOfOrderId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int64_t> &getOrderId() const noexcept;
    ///Set the value of the column order_id
    void setOrderId(const int64_t &pOrderId) noexcept;
    void setOrderIdToNull() noexcept;

    /**  For column product_id  */
    ///Get the value of the column product_id, returns the default value if the column is null
    const int64_t &getValueOfProductId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int64_t> &getProductId() const noexcept;
    ///Set the value of the column product_id
    void setProductId(const int64_t &pProductId) noexcept;

    /**  For column supplier_id  */
    ///Get the value of the column supplier_id, returns the default value if the column is null
    const int64_t &getValueOfSupplierId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int64_t> &getSupplierId() const noexcept;
    ///Set the value of the column supplier_id
    void setSupplierId(const int64_t &pSupplierId) noexcept;

    /**  For column quantity_ordered  */
    ///Get the value of the column quantity_ordered, returns the default value if the column is null
    const int64_t &getValueOfQuantityOrdered() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int64_t> &getQuantityOrdered() const noexcept;
    ///Set the value of the column quantity_ordered
    void setQuantityOrdered(const int64_t &pQuantityOrdered) noexcept;

    /**  For column unit_price  */
    ///Get the value of the column unit_price, returns the default value if the column is null
    const double &getValueOfUnitPrice() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getUnitPrice() const noexcept;
    ///Set the value of the column unit_price
    void setUnitPrice(const double &pUnitPrice) noexcept;

    /**  For column total_price  */
    ///Get the value of the column total_price, returns the default value if the column is null
    const double &getValueOfTotalPrice() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getTotalPrice() const noexcept;
    ///Set the value of the column total_price
    void setTotalPrice(const double &pTotalPrice) noexcept;

    /**  For column order_date  */
    ///Get the value of the column order_date, returns the default value if the column is null
    const ::trantor::Date &getValueOfOrderDate() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getOrderDate() const noexcept;
    ///Set the value of the column order_date
    void setOrderDate(const ::trantor::Date &pOrderDate) noexcept;
    void setOrderDateToNull() noexcept;

    /**  For column expected_delivery_date  */
    ///Get the value of the column expected_delivery_date, returns the default value if the column is null
    const ::trantor::Date &getValueOfExpectedDeliveryDate() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getExpectedDeliveryDate() const noexcept;
    ///Set the value of the column expected_delivery_date
    void setExpectedDeliveryDate(const ::trantor::Date &pExpectedDeliveryDate) noexcept;
    void setExpectedDeliveryDateToNull() noexcept;

    /**  For column actual_delivery_date  */
    ///Get the value of the column actual_delivery_date, returns the default value if the column is null
    const ::trantor::Date &getValueOfActualDeliveryDate() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getActualDeliveryDate() const noexcept;
    ///Set the value of the column actual_delivery_date
    void setActualDeliveryDate(const ::trantor::Date &pActualDeliveryDate) noexcept;
    void setActualDeliveryDateToNull() noexcept;

    /**  For column status  */
    ///Get the value of the column status, returns the default value if the column is null
    const std::string &getValueOfStatus() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getStatus() const noexcept;
    ///Set the value of the column status
    void setStatus(const std::string &pStatus) noexcept;
    void setStatus(std::string &&pStatus) noexcept;

    /**  For column created_at  */
    ///Get the value of the column created_at, returns the default value if the column is null
    const ::trantor::Date &getValueOfCreatedAt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getCreatedAt() const noexcept;
    ///Set the value of the column created_at
    void setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept;
    void setCreatedAtToNull() noexcept;

    /**  For column updated_at  */
    ///Get the value of the column updated_at, returns the default value if the column is null
    const ::trantor::Date &getValueOfUpdatedAt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getUpdatedAt() const noexcept;
    ///Set the value of the column updated_at
    void setUpdatedAt(const ::trantor::Date &pUpdatedAt) noexcept;
    void setUpdatedAtToNull() noexcept;


    static size_t getColumnNumber() noexcept {  return 12;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    std::string toString() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend drogon::orm::Mapper<PurchaseOrder>;
    friend drogon::orm::BaseBuilder<PurchaseOrder, true, true>;
    friend drogon::orm::BaseBuilder<PurchaseOrder, true, false>;
    friend drogon::orm::BaseBuilder<PurchaseOrder, false, true>;
    friend drogon::orm::BaseBuilder<PurchaseOrder, false, false>;
#ifdef __cpp_impl_coroutine
    friend drogon::orm::CoroMapper<PurchaseOrder>;
#endif
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<int64_t> orderId_;
    std::shared_ptr<int64_t> productId_;
    std::shared_ptr<int64_t> supplierId_;
    std::shared_ptr<int64_t> quantityOrdered_;
    std::shared_ptr<double> unitPrice_;
    std::shared_ptr<double> totalPrice_;
    std::shared_ptr<::trantor::Date> orderDate_;
    std::shared_ptr<::trantor::Date> expectedDeliveryDate_;
    std::shared_ptr<::trantor::Date> actualDeliveryDate_;
    std::shared_ptr<std::string> status_;
    std::shared_ptr<::trantor::Date> createdAt_;
    std::shared_ptr<::trantor::Date> updatedAt_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[12]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where order_id = ?";
        return sql;
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where order_id = ?";
        return sql;
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
        if(dirtyFlag_[1])
        {
            sql += "product_id,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "supplier_id,";
            ++parametersCount;
        }
        if(dirtyFlag_[3])
        {
            sql += "quantity_ordered,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "unit_price,";
            ++parametersCount;
        }
        if(dirtyFlag_[5])
        {
            sql += "total_price,";
            ++parametersCount;
        }
        if(dirtyFlag_[6])
        {
            sql += "order_date,";
            ++parametersCount;
        }
        if(!dirtyFlag_[6])
        {
            needSelection=true;
        }
        if(dirtyFlag_[7])
        {
            sql += "expected_delivery_date,";
            ++parametersCount;
        }
        if(dirtyFlag_[8])
        {
            sql += "actual_delivery_date,";
            ++parametersCount;
        }
        if(dirtyFlag_[9])
        {
            sql += "status,";
            ++parametersCount;
        }
        if(!dirtyFlag_[9])
        {
            needSelection=true;
        }
        if(dirtyFlag_[10])
        {
            sql += "created_at,";
            ++parametersCount;
        }
        if(!dirtyFlag_[10])
        {
            needSelection=true;
        }
        if(dirtyFlag_[11])
        {
            sql += "updated_at,";
            ++parametersCount;
        }
        if(!dirtyFlag_[11])
        {
            needSelection=true;
        }
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";

        if(dirtyFlag_[1])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[2])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[3])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[4])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[5])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[6])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[7])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[8])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[9])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[10])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[11])
        {
            sql.append("?,");

        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;
    }
};
} // namespace sqlite3
} // namespace drogon_model
